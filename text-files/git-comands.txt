Git Configuration
git config --global user.name "Your Name"       # Set global username
git config --global user.email "your_email@..." # Set global email
git config --list                               # View all Git settings
git config user.name                            # View local username
git config user.email                           # View local email
git config --get core.editor                    # Check which editor Git uses
git --version                                   # Show Git version
git --help                                      # Display help for Git commands



üìÇ Repository Setup & Info
git init                                        # Initialize a new Git repository
git clone <URL>                                 # Clone a remote repository
git status                                      # Show current status of files
git status --short                              # Show current status of files(short version)
git ls-files                                    # List tracked files
git log                                         # Show commit history
git log --pretty=oneline                        # Show commits in one line each
git log -p                                      # Show changes introduced by each commit
git diff                                        # Show differences between versions

üìú Git Log (Graph View)
git log --graph                                      # Show commit history as ASCII tree  
git log --graph --oneline                            # Compact tree view with short hashes and messages  
git log --graph --oneline --all                      # Include all branches in the graph  
git log --graph --oneline --all --decorate           # Show branch and tag names alongside commits  
git log --graph --oneline --all --decorate --color   # Add color for readability  
git log --graph --oneline --all --decorate --date=short --pretty=format:"%h %ad %d %s (%an)"  
                                                     # Custom format: hash, date, refs, message, author  


üìå Staging & Committing
git add .                                       # Stage all changes
git restore --staged <file>                     # Unstage a file
git reset HEAD                                  # Unstage all changes(all files)
git commit -m "message"                         # Commit with a message
git commit -am "message"                        # Stage and commit in one step
git commit --amend -m "new message"             # Edit last commit message
git reset --hard HEAD^                          # Remove last commit
git reset --hard HEAD~2                         # Remove last two commits
git reflog                                      # Show full history including deleted commits


üìå Git Stash
git stash push -m "comment"                     # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É  
git stash push --include-untracked -m "–≤—Å—ë"     # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë, –≤–∫–ª—é—á–∞—è –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã  
git stash list                                  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—ç—à–µ–π  
git stash show -p                               # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å diff –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç—ç—à–∞  
git stash apply stash@{0}                       # –ü—Ä–∏–º–µ–Ω–∏—Ç—å stash, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ  
git stash pop                                   # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å stash  
git stash drop stash@{1}                        # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π stash  
git stash clear                                 # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ stash'–∏


üåø Branching & Switching
git branch <name>                               # Create a new branch
git branch -m <new name>                        # Rename current branch
git branch -d <name>                            # Delete branch. Does not allow deleting an unmerged branch.
git branch -D <name>                            # Delete a branch. Deletes anyway
git branch -a                                   # List all branches (local + remote)
git branch -vv                                  # Show local branches and their upstream links

git checkout <branch>                           # Switch to branch (old syntax)
git checkout -b <branch>                        # Create and switch to new branch
git switch <branch>                             # Switch to branch (modern syntax)
git switch -c <branch>                          # Create and switch to new branch

git checkout <commit>                           # Go to specific commit
git switch --detach <commit>                    # Detach HEAD and view commit
git checkout -b debug-branch <hash>             # Create branch from specific commit
git switch --create debug-branch <hash>         # Same as above, modern syntax

Ó∑ôÓ∑ö

üîÄ Git Merge
git merge <branch-name>           # Merge specified branch into current branch with merge commit
git merge --ff-only <branch>      # No commit, just moves the pointer.Works only if the current branch is an parent of the merged branch.
git merge --no-ff <branch-name>   # Always creates a merge commit, even if fast-forward is possible
git merge --squash <branch-name>  # Combine changes into one commit (no branch history)
git merge --abort                 # Cancel merge if conflicts arise
example with merge:
  git checkout main
  git merge --no-ff feature-branch -m "Merge feature: layout refactor"

üîÑ Git Rebase
git rebase <branch-name>                        # Reapply commits from current branch onto target
git rebase -i HEAD~N                            # Interactive rebase of last N commits
git rebase --continue                           # Resume rebase after resolving conflicts
git rebase --abort                              # Cancel rebase process

üîÑ Remote Repositories
git remote add origin <URL>                     # Add remote repository
git remote -v                                   # Show remote URLs
git remote                                      # List remote names
git pull origin main                            # Fetch and merge changes from remote
git push                                        # Push changes to remote
git push -u origin main                         # First push to remote main branch
git push --set-upstream origin <branch>         # First push of a new branch

Ó∑ôÓ∑ö

üßπ Reset & Recovery
git reset HEAD                                  # Unstage changes
git reset --hard HEAD^                          # Remove last commit
git reflog                                      # Recover deleted commits
git checkout <hash>                             # Restore state from a specific commit

Ó∑ôÓ∑ö

üß™ Advanced Git
git cat-file -t <hash>                          # Show object type
git cat-file -p <hash>                          # Show object content



üìÅ Terminal File Management
cd <folder>                                     # Enter folder
cd ..                                           # Go up one level
mkdir <folder>                                  # Create folder
pwd                                             # Show where you are
touch                                           # Create a file
cp file folder                                  # Copy a file
cp -r folder                                    # Copy a folder
mv <file/folder>                                # Move file or folder
rm <file>                                       # Delete file
rm -r <folder>                                  # Delete folder
echo <text> > <file>                            # Write text to file
ls                                              # List files and folders
ls > <file name>                                # Create a file
ls -la                                          # List all, including hidden



üåê GitHub & Pull Requests
- origin ‚Äî default name for remote repository
- Pull Request ‚Äî merge branches via GitHub‚Äôs Contribute tab

///////////////////////////////

üîß Git Configuration
# ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
git config --global user.name "Your Name"       # –ò–º—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
git config --global user.email "your_email@..." # Email –¥–ª—è –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤

# üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
git config --list                               # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git
git config user.name                            # –ò–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git config user.email                           # Email –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git config --get core.editor                    # –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# üì¶ –í–µ—Ä—Å–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∞
git --version                                   # –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é Git
git --help                                      # –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

Ó∑ôÓ∑ö

üìÇ Repository Setup & Info
# üÜï –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git init                                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git clone <URL>                                 # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

# üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é
git status                                      # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
git ls-files                                    # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
git log                                         # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤
git log --pretty=oneline                        # –ö–æ–º–º–∏—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
git log -p                                      # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ
git show <hash>                                 # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
git diff                                        # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∏–Ω–¥–µ–∫—Å–æ–º
git diff --cached                               # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É staged –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º

Ó∑ôÓ∑ö

üå≥ Git Log (Graph View)
# üåø –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
git log --graph                                 # ASCII-–¥–µ—Ä–µ–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
git log --graph --oneline                       # –ö—Ä–∞—Ç–∫–∏–π –≥—Ä–∞—Ñ —Å —Ö–µ—à–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
git log --graph --oneline --all --decorate      # –í–µ—Ç–∫–∏, —Ç–µ–≥–∏ –∏ –∫–æ–º–º–∏—Ç—ã
git log --graph --oneline --all --decorate --color   # –¶–≤–µ—Ç–Ω–æ–π –≥—Ä–∞—Ñ
git log --graph --oneline --all --decorate --date=short --pretty=format:"%h %ad %d %s (%an)"   # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

üß† git reflog ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å Git
# üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è HEAD
git reflog
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π: –∫–æ–º–º–∏—Ç—ã, reset, checkout, rebase, amend –∏ —Ç.–¥.

Ó∑ôÓ∑ö

üîç –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ reflog
# üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
git reset --hard HEAD@{1}
# –û—Ç–∫–∞—Ç –∫ –ø–æ–∑–∏—Ü–∏–∏ HEAD –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥

# üï∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–º–º–∏—Ç—É –∏–∑ reflog
git checkout <hash>
# –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ detached HEAD –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç

# üß™ –°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
git checkout -b restore-branch HEAD@{3}
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É

# üîç –ù–∞–π—Ç–∏ –∫–æ–º–º–∏—Ç—ã –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
git reflog | grep commit
git reflog | grep reset
# –§–∏–ª—å—Ç—Ä—É–µ—Ç reflog –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

Ó∑ôÓ∑ö

üìå Staging & Committing
# ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
git add .                                       # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å

# ‚ùó –û—Ç–º–µ–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π git add
git restore --staged <file>                     # –£–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏–∑ staged, –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫–∏

# üîÑ –û—Ç–∫–∞—Ç–∏—Ç—å —Ñ–∞–π–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–æ–º–º–∏—Ç—É
git restore <file>                              # –í–µ—Ä–Ω—É—Ç—å —Ñ–∞–π–ª –∫ –≤–µ—Ä—Å–∏–∏ –∏–∑ HEAD

# üï∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
git restore --source <commit> <file>    


# üß≥ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
git stash                         # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–µ —Ñ–∞–π–ª—ã –∏ staged

# üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
git stash list                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ stash'–∏

# üîÑ –í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
git stash apply                   # –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π stash

# ‚ùå –£–¥–∞–ª–∏—Ç—å stash
git stash drop                    # –£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

////////////////////////

git config --global user.name "Your Name" - set user name
   git config --global user.email "your_email@whatever.com" - set user email
   git config --list - check git information
   git config user.name - check user name in git repository
   git config user.email - check user email in git repository
   git --help - info with git comands
    
   git --version  - checking git version
   git init - start git
   git status - shows status of project in git repository 
   git add . - adds folders to the staging area
   git restore --staged <file>... -  to unstage a staged file
   git reset HEAD - command to unstage changes.write after git add 
   git reset --hard HEAD^ - removes the last commits
   git reset --hard HEAD~2 - removes the last two commits.
   git reflog - shows all commits(shows commit's hashes) even deleted commits.then git checkout< hash> .git branch <new branch>< hash>.on main mergering with new branch

   git commit -m "comment"-  adds folders to the repository with some comments
   git commit -am "comment" - one comannd instad of two -( git add .) ( git commit -m "comment")
   git commit --amend -m "new text" - changing text in commit
   git log - shows all the commits in the project with its full information 
   git log --pretty=oneline - shows all the commits in the project with its full information every commit in one line
   git log -p  - shows what was changed
   git diff  - shows what was changed
   git checkout <commit hash> - goes to the one of version in the project - old version
   git switch --detach <commit hash> - - goes to the one of version in the project - new version
   git checkout <main> - goes back to the last commit in the project 
   git switch main - goes back to the last commit in the project
   git switch < branch name> - goes to the one of version in the project
   git checkout -b debug-branch 7a3f9c2  - move to this commit and from there immediately create a new branch
   git switch --create debug-branch 7a3f9c2 - move to this commit and from there immediately create a new branch


   git branch <branch name> - creates new branch 
   git checkout <branch name> - goes to the one of branches in the project (main, master...) - old version 
   git checkout -b <branch name> - creating a new branch and moving to it 
   git switch < branch name> - goes to the one of branches in the project (main, master...) - new version
   git switch -c <branch name> - Create and immediately switch to a new branch

   git branch - shows branch list  
   git branch -m <new branch name> - renaming the current branch 
   git branch -d <branch name> - deleting a branch (except the current branch) 
   git merge <branch name> - branch merging with the current branch 
   git merge -m "message" <branch name> - branch merging with the current branch and with a comment 
   git branch -a - to see all the branches on the remote repository 

   cd <folder name> - goes to the pointed folder in the project 
   cd .. returns to the root folder in the project 
   git cat-file -t <hash> - shoes type of the git object 
   git cat-file -p <hash> - shoes content(folders and files) of the git object 
   rm <name of folder or file> - removes folders and files from project 
   mkdir <name of folder> - creates new folder in the project  
   echo <text> > <name of file> - creates content in the pointed file 
   ls - shows all folders and files in the project
   ls -la  - shows all folders and files in the project with hidden folders and files
   git ls-files - shows all folders and files in the project

   origin - a remote repository name (https://github.com/andrewdreamer13/test)
   git clone <URL> - cloning a remote repository to my computer 
   git branch -a - to see all the branches on the remote repository 
   git pull origin main - download changes from the remote branch in gitHub to the local branch 
   git push - upload changes from the local branch to the remote branch 
   git remote add origin <URL> - adding a remote repository on gitHub 
   git push -u origin main - uploading changes from a local branch to a remote branch(for the first pushing on githab.Then use git push)
   git push --set-upstream origin <branch name> - uploading changes from a local new branch to a remote branch(for the first pushing on githab.Then use git push)
   git remote -v - shows address of the remote repository -->
   git branch -vv - shows conection local branch with remote branch 
   git remote - checking if remote repository exists(if exists,shows its name) 
   pull request -  branch merging in gitHub by Contribute tab


   